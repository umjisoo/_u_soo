1.
강아지가 n*n크기의 2차원 배열의 가운데 위치 (n/2,n/2)에서 출발
n은 홀수  상화좌우 4방향으로 인접한 셀들중에서 방문한 적이 없는 한셀을
동일한 확률로 랜덤하게 선택하여 한칸 이동 
아무곳으로도 이동할 수 업슨 상태에 처하면 탈출에 실패 
강아지가 탈출에 성공할 확률을 시뮬레이션으로 계산하는 프로그램
(실험횟수=10000)
#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#define MAX 100
int main(){
	int n,T=10000,count=0;
	int dog[MAX][MAX],a;
	int offset[4][2] = { {0,-1},{1,0},{-1,0},{0,1} };
	srand((unsigned int)time(NULL));
	scanf("%d", &n);

	for (int t = 0; t < T; t++) {
		int x = n / 2, y = n / 2;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) 
				dog[i][j] = 0;
		}

		int j=1;
		while (x > 0 && x < n - 1 && y>0 && y < n - 1)  {
			int direction = -1;
			int num_case = 0;
			dog[x][y] = 1;
			for (int dir = 0; dir < 4; dir++) {
				int x_new =x+ offset[dir][0];
				int y_new = y + offset[dir][1];
				if (x_new >= 0 && x_new < n&&y_new>=0&&y_new<n&&dog[x_new][y_new]==0) {
					num_case++;
					if ((rand() % num_case) == 0)
						direction = dir;
				}
			}

			if (direction == -1) {
				j = 0;
				break;
			}
			x += offset[direction][0];
			y += offset[direction][1];
		}
		if (j == 1) count++;
	}
	
	printf("%d,%lf",count, (double)count/T);

	return 0;
}

3.
2차원 배열을 이용 이항계수 nCk, n개 중에서 k를 선택하는 경우의 수 
#include <stdio.h>
#define MAX 100
int main(){
	int n, a, C[MAX][MAX];
	scanf("%d", &n);
	scanf("%d", &a);
	C[0][0] = 1;
	C[1][0] = 1;
	C[1][1] = 1;
	for (int i = 2; i <= n; i++) {
		C[i][0] = 1;
		C[i][i] = 1;

		for (int j = 1; j < i ; j++) {
			C[i][j] = C[i - 1][j] + C[i - 1][j - 1];
		}
	}

	printf("%d", C[n][a]);
	return 0;
}

4.
데이터 파일 input.txt에는 하나의 nxn 행렬이 저장
파일의 첫줄에는 행렬의 크기가 ㅈ장
이어진 n줄에는 각 줄마다 n개의개수 저장
파일을 읽어서 표준편차, 평균 구해서 출력


#include <stdio.h>
#include <math.h>
#define MAX 100
int main(){
	int n, a, F[MAX][MAX];
	double route_i[MAX];
	FILE*fp = fopen("input4.txt", "r");
	fscanf(fp,"%d", &n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			fscanf(fp,"%d", &F[i][j]);
		}
	}
	fclose(fp);
	for (int i = 0; i < n; i++) {
		int sum_j = 0, sum_j2 = 0;
		double average_j;
		double route_j;
		for (int j = 0; j < n; j++) {
			sum_j += F[i][j];
			sum_j2 +=( F[i][j] * F[i][j]);
			average_j = sum_j / (n*1.0);
			route_j = sqrt((sum_j2 / (n*1.0)) - (average_j* average_j));
			printf("%d ", F[i][j]);
		}
		printf("%lf %lf\n", average_j, route_j);
	}
	for (int j = 0; j < n; j++) {
		int sum_i = 0, sum_i2 = 0;
		double average_i,route=0.0;
		for (int i = 0; i < n; i++) {
			sum_i += F[i][j];
			sum_i2 += (F[i][j] * F[i][j]);
			average_i = sum_i / (n*1.0);
			route= sqrt((sum_i2 / (n*1.0)) - (average_i* average_i));
			route_i[j] = route;
		}
		printf("%lf ", average_i);
	}
	printf("\n");
	for (int j = 0; j < n; j++)
		printf("%lf ",route_i[j]);

	return 0;
}

6.
input.txt에는 행렬저장
달팽이 모양으로 출력

#include <stdio.h>
#include <math.h>
#define MAX 100
int main() {
	int n,F[MAX][MAX];
	double route_i[MAX];
	FILE*fp = fopen("input6.txt", "r");
	fscanf(fp, "%d", &n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			fscanf(fp, "%d", &F[i][j]);
		}
	}
	fclose(fp);
	int k = 0;
	int i = 0, j = -1;
	while (n > 0) {
		if (k == 0) {
			for (int g = 0; g < n; g++) {
				j++;
				printf("%d ", F[i][j]);
			}k = 1;
		}

		if (k == 1) {n--;
			for (int g = 0; g < n; g++) {
				i++;
				printf("%d ", F[i][j]);
			}k = 2;
		}

		if (k == 2) {
			for (int g = 0; g < n; g++) {
				j--;
				printf("%d ", F[i][j]);
			}k = 3;
		}

		if (k == 3) {n--;
			for (int g = 0; g < n; g++) {
				i--;
				printf("%d ", F[i][j]);
			}k = 0;
		}

	}

	return 0;

}

7.
음이 아닌 정수로 입력 ->벽돌의 개수
벽돌안에 고여있는 물의 양

#include<stdio.h>
#define MAX 100000
int main()
{
	int water[MAX];
	int n, a, count = 0, max, max_index = 0, a_index;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) 
		scanf("%d", &water[i]);
	max = water[0];
	for (int i = 0; i < n; i++) {
		if (max < water[i]) {
			max = water[i];
			max_index = i;
		}
	}

	for (int j = 0; j < n; j++) {
		if (water[j] != 0) {
			a = water[j];
			a_index = j;
			break;
		}
	}
	for (int i = a_index; i < max_index; i++) {
		
		if (a <= water[i])
			a = water[i];
		else
			count += (a - water[i]);
	}
	for (int j = n-1; j >= 0; j--) {
		if (water[j] != 0) {
			a = water[j];
			a_index = j;
			break;
		}
	}
	for (int k = n - 1; k > max_index; k--) {
		if (a <= water[k])
			a = water[k];
		else
			count += (a - water[k]);
	}
	if(a!=max_index)printf("%d\n", count);
	else printf("0\n");

	return 0;
}