포커 프로그램

#include <stdio.h>
#define NUM_RANKS 13
#define NUM_SUITS 4
#define NUM_CARDS 5
int num_in_rank[NUM_RANKS + 1];
int num_in_suit[NUM_CARDS];
void init_data(void);
void read_cards(void);
void analyze_hand(void);
int check_flush(int num_in_suit[]);
int check_straight(int num_in_rank[]);
int check_four_cards(int num_in_rank[]);
int check_three_cards(int num_in_rank[]);
int count_pairs(int num_in_rank[]);
int main() {
	while (1) {
		read_cards();
		analyze_hand();
	}
	return 0;
}
void read_cards(void) {
	char ch, rank_ch,suit_ch;
	int rank, suit;
	init_data();
	int cards_read = 0;
	while (cards_read < NUM_CARDS) {
		printf("Enter a card: ");
		scanf(" %c", &rank_ch);
		switch (rank_ch) {
		case'a':rank = 1; break;
		case'2':rank = 2; break;
		case'3':rank = 3; break;
		case '4':rank = 4; break;
		case'5':rank = 5; break;
		case'6':rank = 6; break;
		case'7':rank = 7; break;
		case'8':rank = 8; break;
		case'9':rank = 9; break;
		case't':rank = 10; break;
		case'j':rank = 11; break;
		case'q':rank = 12; break;
		case'k':rank = 13; break;
		}
		scanf(" %c", &suit_ch);
		switch (suit_ch) {
		case'c':suit = 0; break;
		case'd':suit = 1; break;
		case'h':suit = 2; break;
		case's':suit = 3; break;
		}
		if (rank < 1 || rank>13 || suit < 0 || suit>3)
		{
			printf("Enter a card again : ");
		 }
		else {
			num_in_rank[rank]++;
			num_in_suit[suit]++;
			cards_read++;
		}
	}
}
void analyze_hand(void) {
	if (check_straight(num_in_rank) == 1 && check_flush(num_in_suit) == 1)
		printf("straight flush\n");
	else if (check_four_cards(num_in_rank) == 1)
		printf("four cards\n");
	else if (check_three_cards(num_in_rank) == 1 && count_pairs(num_in_rank) == 1)
		printf("full house\n");
	else if (check_flush(num_in_suit) == 1)
		printf("flush\n");
	else if (check_straight(num_in_rank) == 1)
		printf("straight\n");
	else if (check_three_cards(num_in_rank) == 1)
		printf("triple\n");
	else if (count_pairs(num_in_rank) == 2)
		printf("two pairs\n");
	else if (count_pairs(num_in_rank) == 1)
		printf("pair\n");
	else
		printf("high card\n");

}
void init_data(void) {
	int rank, suit;
	for (rank = 0; rank < NUM_RANKS; rank++)
		num_in_rank[rank] = 0;
	for (suit = 0; suit < NUM_SUITS; suit++)
		num_in_suit[suit] = 0;
}
int check_flush(int num_in_suit[] ) {
	for (int suit = 0; suit <= 3; suit++) {
		if (num_in_suit[suit] == 5)
			return 1;
	}
	 return 0;
}
int check_straight(int num_in_rank[]) {//동일한이 아니라 연속됨임
	int rank_count = 0;
	int rank;
	for (rank = 1; rank < 14; rank++) {
		if (num_in_rank[rank] == 1)
			 break;
	}
	for (int i = 0; i < 5; i++) {
		if (num_in_rank[rank+i] == 1)rank_count++;
	}
	if (rank_count == 5)return 1;
	return 0;
}
int check_four_cards(int num_in_rank[]) {
	for (int rank = 1; rank < 14; rank++) {
		if (num_in_rank[rank] == 4)
			return 1;
	}
	return 0;
}
int check_three_cards(int num_in_rank[]) {
	for (int rank = 1; rank < 14; rank++) {
		if (num_in_rank[rank] == 3)
			return 1;
	}
	return 0;
}
int count_pairs(int num_in_rank[]) {
	int count = 0;
	for (int rank = 1; rank < 14; rank++) {
		if (num_in_rank[rank] == 2)
			count++;
	}
	if (count == 1)return 1;
	else if (count == 2)return 2;
	return 0;
}




2.
가우스 소거법으로 행렬풀기

#include <stdio.h>
#define MAX 100

void gauss_eli(int n);
double data[MAX][MAX]; 
double b[MAX], x[MAX]; 
double matrix[MAX];
int main(void)
{
	int n, i = 0, j = 0;
	
	FILE *fp = fopen("input3.txt", "r");
	fscanf(fp, "%d", &n);

	while (fscanf(fp, "%lf", &data[i][j]) != EOF) {
		for (int j = 1; j < n; j++)
			fscanf(fp, "%lf", &data[i][j]);
		fscanf(fp, "%lf", &b[i]);
		i++;
	}
	gauss_eli(n);

	return 0;
}

void gauss_eli(int n)
{
	

	for (int i = 0; i < n - 1; i++) { 
		double inverse = data[i][i];
		for (int j = i + 1; j <= n - 1; j++) { 
			double multi = data[j][i] / inverse;
			for (int q = 0; q < n; q++) { 
				matrix[q] = -(data[i][q] * multi);
			}
			matrix[n] = -(b[i] * multi);

			for (int q = 0; q < n; q++) {
				data[j][q] += matrix[q];
			}
			b[j] += matrix[n];
		}
	}

	int empty = 0;
	for (int q = 0; q < n; q++) {
		if (data[n - 1][q] != 0)
			empty++;
	}
	int b_emt = 0;
	if (b[n - 1] != 0)
		b_emt++;

	if (empty == 0) {
		if (b_emt == 0)
			printf("Infinite solution\n");
		else
			printf("No solution\n");
	}
	else {
		x[n - 1] = b[n - 1] / data[n - 1][n - 1];

		for (int q = n - 2; q >= 0; q--) { 
			x[q] = b[q]; 
			for (int u = q + 1; u < n; u++) { 
				x[q] -= (data[q][u] * x[u]);
			}
			x[q] /= data[q][q];
		}
		for (int q = 0; q < n; q++) {
			printf("x%d = %lf\n", q + 1, x[q]);
		}
	}

	return 0;
}

