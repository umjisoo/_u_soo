1.
입력으로 하나의 문자열을 받은 후 뒤집어서 출력


#include <stdio.h>
#include <string.h>
int main() {
	char word[100];
	int len;
	scanf("%s", word);
	len = strlen(word);
	for (int i = len - 1; i >= 0;i--)
		printf("%c", word[i]);
	return 0;
}

2.

하나의 영문 소문자로 구성된 문자열을 받은후 알파벳순으로 정렬

#include <stdio.h>
#include <string.h>
int dictionary(int a, int b);
char word[100];
int main() {
	int len;
	scanf("%s", word);
	len = strlen(word);
	for (int i = 0; i < len - 1; i++) {
		int result = dictionary(word[i], word[i + 1]);
		if (result) {
			int tmp = word[i];
			word[i] = word[i + 1];
			word[i + 1] = tmp;
		}
		for (int i = 0; i < len; i++)
			printf("%c", word[i]);

		return 0;
	}
}
	int dictionary(int a, int b) {
		if (a >= b)
			return 1;
		return 0;
	}

3.

아나그램 ->문자를 재배열하여 동일하게 만들 수 있는 문자열
대소문자 구분안함 

#include <stdio.h>
#include <string.h>
int main(void) {
	char word_1[100];
	char word_2[100];
	int len, count = 0,len2;
	scanf("%s", word_1);
	scanf("%s", word_2);

	len = strlen(word_1);
	len2 = strlen(word_2);

	if (len != len2)
		printf("no\n");

	else {
		for (int i = 0; i < len; i++) {
			for (int j = 0; j < len; j++) {
				if (word_1[i] == word_2[j]) { count++; word_2[j] = 0; break; }
			}
		}
		if (count == len)
			printf("yes\n");
		else
			printf("no\n");
	}
	return 0;
}


4.

input.txt를 읽어서 output.txt로 출력
출력파일의 한줄을 80줄 초과안됨.

#include <stdio.h>
#include <string.h>
int main(void) {
	char buffer[100];
	char ch;
	int count = 0, i = 0, len,sum=0;
	FILE*in_fp = fopen("input.txt", "r");
	FILE*out_fp = fopen("output.txt", "w");
	while (fscanf(in_fp, "%s", &buffer) != EOF) {
		len = strlen(buffer)+1;
		sum += len;
		if (sum> 80) {
			fprintf(out_fp, "\n"); sum = 0;
		}
		else {
			fprintf(out_fp, "%s ", buffer);
		}
	}
	fclose(in_fp);
	fclose(out_fp);

	return 0;
}

5.

단어찾기 프로그램

#include <stdio.h>
#include <string.h>
#define MAX 100
void read_dictionary();
void read_grid();
int search(int i);
int offsetx[] = { 0,1,1,1,0,-1,-1,-1 };
int offsety[] = { -1,-1,0,1,1,1,0,-1 };
char get_char(int x, int y, int dir, int k);
int n;
char grid[MAX][MAX];
char dict[4000][16];
int num;

int main() {
    read_grid();
	read_dictionary();

	for(int i=0;i<=num;i++){
		int result = search(i);
		if (result==1)
			printf("%s\n", dict[i]);

	}
	return 0;
}
char get_char(int x, int y, int dir, int k) {
	int newx = x + k * offsetx[dir];
	int newy = y + k * offsety[dir];
	if (newx < 0 || newx >= n || newy < 0 || newy >= n)
		return '\0';
	return grid[newx][newy];
}
void read_grid(){
	FILE*fp = fopen("input.txt", "r");
	fscanf(fp, "%d", &n);
	for (int i = 0; i < n; i++) {
		fscanf(fp, "%s", grid[i]);
	}fclose(fp);
}
void read_dictionary() {
	FILE*fp = fopen("dictionary.txt", "r");
	int i = 0;
	while (fscanf(fp, "%s", dict[i]) != EOF) {
		i++;
		num = i;
	}
	fclose(fp);
}
int search(int i) {
	int word_len = strlen(dict[i]);
	for (int k = 0; k < n; k++) {
		for (int j = 0; j < n; j++) {
			if (grid[k][j] != dict[i][0])
				continue;

			for (int dir = 0; dir < 8; dir++) {
				int dist = 1;
				for (; dist < word_len; dist++) {
					char ch = get_char(k, j, dir, dist);
					if (ch == '\0' || ch != dict[i][dist])
						break;
				}
				if (dist >= word_len)
					return 1;
			}
		}
	}
}